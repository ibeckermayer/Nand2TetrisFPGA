function Math.init 0
push constant 16
pop static 0
push static 0
call Array.new 1
pop static 1
push static 1
push constant 0
add
pop pointer 1
push pointer 1
pop temp 1
push constant 1
push temp 1
pop pointer 1
pop that 0
push static 1
push constant 1
add
pop pointer 1
push pointer 1
pop temp 1
push constant 2
push temp 1
pop pointer 1
pop that 0
push static 1
push constant 2
add
pop pointer 1
push pointer 1
pop temp 1
push constant 4
push temp 1
pop pointer 1
pop that 0
push static 1
push constant 3
add
pop pointer 1
push pointer 1
pop temp 1
push constant 8
push temp 1
pop pointer 1
pop that 0
push static 1
push constant 4
add
pop pointer 1
push pointer 1
pop temp 1
push constant 16
push temp 1
pop pointer 1
pop that 0
push static 1
push constant 5
add
pop pointer 1
push pointer 1
pop temp 1
push constant 32
push temp 1
pop pointer 1
pop that 0
push static 1
push constant 6
add
pop pointer 1
push pointer 1
pop temp 1
push constant 64
push temp 1
pop pointer 1
pop that 0
push static 1
push constant 7
add
pop pointer 1
push pointer 1
pop temp 1
push constant 128
push temp 1
pop pointer 1
pop that 0
push static 1
push constant 8
add
pop pointer 1
push pointer 1
pop temp 1
push constant 256
push temp 1
pop pointer 1
pop that 0
push static 1
push constant 9
add
pop pointer 1
push pointer 1
pop temp 1
push constant 512
push temp 1
pop pointer 1
pop that 0
push static 1
push constant 10
add
pop pointer 1
push pointer 1
pop temp 1
push constant 1024
push temp 1
pop pointer 1
pop that 0
push static 1
push constant 11
add
pop pointer 1
push pointer 1
pop temp 1
push constant 2048
push temp 1
pop pointer 1
pop that 0
push static 1
push constant 12
add
pop pointer 1
push pointer 1
pop temp 1
push constant 4096
push temp 1
pop pointer 1
pop that 0
push static 1
push constant 13
add
pop pointer 1
push pointer 1
pop temp 1
push constant 8192
push temp 1
pop pointer 1
pop that 0
push static 1
push constant 14
add
pop pointer 1
push pointer 1
pop temp 1
push constant 16384
push temp 1
pop pointer 1
pop that 0
push static 1
push constant 15
add
pop pointer 1
push pointer 1
pop temp 1
push constant 16384
push constant 16384
add
push temp 1
pop pointer 1
pop that 0
return
function Math.bit 0
push argument 0
push static 1
push argument 1
add
pop pointer 1
push that 0
and
push constant 0
eq
not
if-goto else_Math_0
push constant 0
return
goto if_else_end_Math_0
label else_Math_0
push constant 1
neg
return
label if_else_end_Math_0
function Math.multiply 6
push argument 0
push constant 0
lt
pop local 3
push argument 1
push constant 0
lt
pop local 4
push local 3
push local 4
eq
not
pop local 5
push local 3
not
if-goto else_Math_1
push argument 0
call Math.abs 1
pop argument 0
goto if_else_end_Math_1
label else_Math_1
label if_else_end_Math_1
push local 4
not
if-goto else_Math_2
push argument 1
call Math.abs 1
pop argument 1
goto if_else_end_Math_2
label else_Math_2
label if_else_end_Math_2
push constant 0
pop local 1
push argument 0
pop local 2
push constant 0
pop local 0
label while_start_Math_0
push local 0
push static 0
lt
not
if-goto while_end_Math_0
push argument 1
push local 0
call Math.bit 2
not
if-goto else_Math_3
push local 1
push local 2
add
pop local 1
goto if_else_end_Math_3
label else_Math_3
label if_else_end_Math_3
push local 2
push local 2
add
pop local 2
push local 0
push constant 1
add
pop local 0
goto while_start_Math_0
label while_end_Math_0
push local 5
not
if-goto else_Math_4
push local 1
neg
return
goto if_else_end_Math_4
label else_Math_4
label if_else_end_Math_4
push local 1
return
function Math.divide 6
push argument 0
push constant 0
lt
pop local 0
push argument 1
push constant 0
lt
pop local 1
push local 0
push local 1
eq
not
pop local 2
push local 0
not
if-goto else_Math_5
push argument 0
call Math.abs 1
pop argument 0
goto if_else_end_Math_5
label else_Math_5
label if_else_end_Math_5
push local 1
not
if-goto else_Math_6
push argument 1
call Math.abs 1
pop argument 1
goto if_else_end_Math_6
label else_Math_6
label if_else_end_Math_6
push argument 1
push constant 0
eq
not
if-goto else_Math_7
push constant 0
return
goto if_else_end_Math_7
label else_Math_7
label if_else_end_Math_7
push argument 1
push argument 0
gt
not
if-goto else_Math_8
push constant 0
return
goto if_else_end_Math_8
label else_Math_8
label if_else_end_Math_8
push argument 1
push argument 1
add
pop local 4
push argument 0
push local 4
call Math.divide 2
pop local 3
push argument 0
push local 4
push local 3
call Math.multiply 2
sub
push argument 1
lt
not
if-goto else_Math_9
push local 3
push local 3
add
pop local 5
goto if_else_end_Math_9
label else_Math_9
push local 3
push local 3
add
push constant 1
add
pop local 5
label if_else_end_Math_9
push local 2
not
if-goto else_Math_10
push local 5
neg
return
goto if_else_end_Math_10
label else_Math_10
label if_else_end_Math_10
push local 5
return
function Math.sqrt 4
push argument 0
push constant 0
eq
push argument 0
push constant 0
lt
or
not
if-goto else_Math_11
push constant 0
return
goto if_else_end_Math_11
label else_Math_11
label if_else_end_Math_11
push constant 0
pop local 0
push static 0
push constant 2
call Math.divide 2
push constant 1
sub
pop local 1
label while_start_Math_1
push local 1
push constant 1
neg
gt
not
if-goto while_end_Math_1
push local 0
push static 1
push local 1
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
eq
not
if-goto else_Math_12
push local 2
return
goto if_else_end_Math_12
label else_Math_12
label if_else_end_Math_12
push local 3
push constant 0
gt
push local 3
push argument 0
lt
and
not
if-goto else_Math_13
push local 2
pop local 0
goto if_else_end_Math_13
label else_Math_13
label if_else_end_Math_13
push local 1
push constant 1
sub
pop local 1
goto while_start_Math_1
label while_end_Math_1
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto else_Math_14
push argument 0
return
goto if_else_end_Math_14
label else_Math_14
label if_else_end_Math_14
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
not
if-goto else_Math_15
push argument 0
return
goto if_else_end_Math_15
label else_Math_15
label if_else_end_Math_15
push argument 1
return
function Math.abs 0
push argument 0
push constant 0
lt
not
if-goto else_Math_16
push argument 0
neg
return
goto if_else_end_Math_16
label else_Math_16
label if_else_end_Math_16
push argument 0
return
