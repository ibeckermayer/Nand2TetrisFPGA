// Should be copied into test/MathTest/Math.jack and the compiler run on that directory.

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer).
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        let n = 16;
        let powersOfTwo = Array.new(n);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = 16384 + 16384; // -32767;
        return;
    }

    /** Returns true if the j-th bit of the integer x is 1 and false otherwise. */
    function bool bit(int x, int j) {
        if ((x & powersOfTwo[j]) = 0) {
            return false;
        }
        else {
            return true;
        }
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method.
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int j, sum, shiftedX;
        //var boolean xIsNegative, yIsNegative, resultIsNegative;

        //let xIsNegative = x < 0;
        //let yIsNegative = y < 0;
        //let resultIsNegative = ~(xIsNegative = yIsNegative);
        //if (xIsNegative) {
            //let x = Math.abs(x);
        //}
        //if (yIsNegative) {
            //let y = Math.abs(y);
        //}

        let sum = 0;
        let shiftedX = x;
        let j = 0;
        while (j < n) {
            if (Math.bit(y, j)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }
        //if (resultIsNegative) {
            //return -sum;
        //}
        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var boolean xIsNegative, yIsNegative, resultIsNegative;
        var int q, twoY, result;

        let xIsNegative = x < 0;
        let yIsNegative = y < 0;
        let resultIsNegative = ~(xIsNegative = yIsNegative);
        if (xIsNegative) {
            let x = Math.abs(x);
        }
        if (yIsNegative) {
            let y = Math.abs(y);
        }

        if (y = 0) {
            return 0;
        }

        if (y > x) {
            return 0;
        }

        let twoY = y + y;
        let q = Math.divide(x, twoY);

        if ((x - (twoY*q)) < y) {
            let result = q+q;
        }
        else {
            let result = q+q+1;
        }

        if (resultIsNegative) {
            return -result;
        }
        return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, temp, tempSquared;

        // Early return: 0 or negative numbers
        if ((x = 0) | (x < 0)) {
            return 0;
        }

        let y = 0;
        let j = n/2 - 1;
        while (j > -1) {
            let temp = y + powersOfTwo[j];
            let tempSquared = temp * temp;

            // Early return: exact square root
            if (tempSquared = x) {
                return temp;
            }

            // If tempSquared is positive and less than x, then set this bit to 1
            // in our result.
            if ((tempSquared > 0) & (tempSquared < x)) {
                let y = temp;
            }

            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }
}
